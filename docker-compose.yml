version: '3.8'

services:
  # Main application
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: cybertoolbox-app
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://cybertoolbox:${DB_PASSWORD:-secure_password}@db:5432/cybertoolbox
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./reports:/app/reports
      - ./logs:/app/logs
      - ./templates:/app/templates
      - ./data:/app/data
    depends_on:
      - db
      - redis
    networks:
      - cybertoolbox-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend
  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
    container_name: cybertoolbox-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
    volumes:
      - ./src/frontend:/app
      - /app/node_modules
    depends_on:
      - app
    networks:
      - cybertoolbox-network
    restart: unless-stopped

  # Database
  db:
    image: postgres:13-alpine
    container_name: cybertoolbox-db
    environment:
      - POSTGRES_DB=cybertoolbox
      - POSTGRES_USER=cybertoolbox
      - POSTGRES_PASSWORD=${DB_PASSWORD:-secure_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./configs/postgres.conf:/etc/postgresql/postgresql.conf
    ports:
      - "5432:5432"
    networks:
      - cybertoolbox-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cybertoolbox"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis cache
  redis:
    image: redis:6-alpine
    container_name: cybertoolbox-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-secure_redis_password}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cybertoolbox-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: cybertoolbox-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
      - frontend
    networks:
      - cybertoolbox-network
    restart: unless-stopped

  # Prometheus monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: cybertoolbox-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - cybertoolbox-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: cybertoolbox-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - cybertoolbox-network
    restart: unless-stopped
    profiles:
      - monitoring

networks:
  cybertoolbox-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
